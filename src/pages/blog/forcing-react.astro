---
import HtmlLayout from "../../layouts/HtmlLayout.astro";
import {MainLayout} from "../../layouts/main-layout"

const pathname = Astro.url.pathname;
---
<HtmlLayout title="Looking at Legend Stae" description="Looking at the practicality of legend state in React apps.">
    <MainLayout client:visible currentPathname={pathname}>
        <article class="prose prose-invert">
            <h1>Forcing React to be What It Isn&apos;t</h1>
            <p>It's impossible to deny that SolidJS has won the competition of performant reactive frameworks. Spending
                a little time working with it you realize the entire concept of the vDOM and managing renders in React
                fooled us all.
                <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead" target="_blank">Rich Harris was right</a>.
            </p>
            <p>While React&apos;s
                <a target="_blank" href="https://youtu.be/8pDqJVdNa44?si=g9fSPcHB0Y4J4OoE&t=542">"blow away the entire UI and rerender all of it"</a>
                model helped create consistent, declarative UI&apos;s. It may have been overkill in hindsight.
                One good idea taken way too far.</p>
            <p>If you've worked with multiple frameworks, it's likely you've grown tired of this mental model.
                As <a href="https://angular.dev/guide/signals" target="_blank">Angular</a>,
                <a href="https://vuejs.org/guide/extras/reactivity-in-depth.html" target="_blank">Vue</a>,
                <a href="https://preactjs.com/guide/v10/signals/" target="_blank">Preact</a>,
                <a href="https://qwik.dev/docs/components/state/" target="_blank">Qwik</a>,
                <a href="https://docs.solidjs.com/concepts/signals" target="_blank">Solid</a>,
                and <a href="https://svelte.dev/blog/runes" target="_blank">Svelte</a>
                have implemented signals for fine-grained reactivity. It feels like React is falling behind.
                And as a result, falling behind in performance.</p>
            <img class="h-[467px]" src="/images/js-framework-benchmark.png" alt="JS framework benchmark, React is slow" />
            <p>The React team themselves have never had a preference for client-side rendering and complex
                client-side state. Facebook was never built on the pure SPA model we&apos;ve become familiar with
                thanks to React. Even today, via RSC and
                <a href="https://react.dev/learn/start-a-new-react-project">recommending NextJS in the getting started docs</a>,
                React has a strong preference for pushing local state to the server.</p>
            <p>It makes sense to view React as a server-first framework because it is so weak with client side state next to its' competitors.</p>
            <p>Yet, it can feel like we&apos;re stuck with it. Spending an inordinate amount of time demanding that it
                just. stop. rerendering. When it feels like <strong>not</strong> rerendering everything on every change
                should be the default behavior, as it is in every other framework.</p>
            <p>With my own state management utility, I went down the path of exploring the idea of
                <a href="https://github.com/eglove/store" target="_blank">using ref's to manipulate the DOM directly</a>.
                With no performance optimizations it's only a tad faster than Zustand. But within the same performance category.
                Even <a href="https://github.com/cafreeman/signalis" target="_blank">Signalis</a>,
                which puts a lot of work into bringing signals to React, has roughly the same performance as my own
                store and Zustand.</p>
            <p>State managers like Redux, Zustand, and others have put a lot of time and effort into trying to make
                React more performant with local state. Primarily by pulling that state outside of React's lifecyles and
                controlling it's awareness of state changes. Doesn't that seem a bit odd? Like we've all been fighting
                the framework this whole time? This is a responsibility that seems more appropriate for React itself.</p>
            <p>useState and Context have never been good enough. Why are there still 100 libraries and no built-in
                answer for true reactivity?</p>
            <img alt="React legacy docs joke about React not being reactive" class="h-[88px] w-auto mb-0" src="/images/react-not-reactive.png">
            <a href="https://legacy.reactjs.org/docs/design-principles.html#scheduling" target="_blank" class="mb-8">Source</a>
            <p>Legend State recently <a href="https://www.legendapp.com/open-source/" target="_blank">released version 2</a>
                which introduces synchronization for local-first apps. Which is pretty appealing.</p>
            <p>What's more appealing is digging back into a blog from 2022 in which they claim
                <a href="https://legendapp.com/open-source/legend-state/" target="_blank">it makes React truly reactive.</a>
                I can&apos;t tell you how much these talking points appeal to me after experiencing working with SolidJS.
            </p>
            <p>One thing that stood out to me is the performance benchmarks. I&apos;ll assume that in 2022
                <a href="https://github.com/krausest/js-framework-benchmark" target="_blank">krausest/js-framework-benchmark</a>
                did not seperate keyed and non-keyed frameworks. Because as of today they are split into two categories.
                And in the "keyed" category Legend State does not outperform Zustand, Recoil, MobX or any other.</p>
            <p>As a non-keyed framework, however, it's approaching the performance of Angular and Vue.
                This is very interesting. That a state management library can theoretically improve the performance of
                React. Because ultimately React still controls everything. No matter the optimization, it has to go
                through React's reconciliation process, right?</p>
            <p>That&apos;s what I want to look at next, looking into how practical Legend State is, by
                pushing a real react app into non-keyed territory.</p>
            <p>On first glance, it looks like the "state-manager" is just providing a lot of utilities for React
                memoization. Their examples look like an unfair comparison in which the React example uses no
                memoization, and their example uses a &lt;Memo/&gt; component wrapper. But recreate it and you realize
                how handy this component really is. Legend state is providing a standard library for React in a similar
                vein to Effect.ts providing a standard library for JavaScript.</p>
            <p>But I wouldn&apos;t recommend Effect due to it&apos;s dogmatic functional roots.
                But maybe for React, it needs a dogmatic wrapper to help us get around the blatantly poor performance
                of React itself.</p>
        </article>
    </MainLayout>
</HtmlLayout>